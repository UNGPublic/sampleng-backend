<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:p="http://www.springframework.org/schema/p"
         xmlns:sec="http://www.springframework.org/schema/security"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- RESTful Resources configuration -->
    <sec:http pattern="/res/**" entry-point-ref="restEntryPoint" use-expressions="true" >
        <sec:intercept-url pattern="/**" access="isAuthenticated()"/>

        <sec:custom-filter ref="casFilter" position="CAS_FILTER" />
        <sec:custom-filter ref="singleLogoutFilter"  before="CAS_FILTER"/>
        <sec:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
    </sec:http>

    <!-- HTTP Root Access configuration -->
    <sec:http pattern="/**" entry-point-ref="casEntryPoint" use-expressions="true">
        <sec:intercept-url pattern="/" access="permitAll"/>
        <sec:intercept-url pattern="/index.jsp" access="permitAll"/>
        <sec:intercept-url pattern="/casfailed.jsp" access="permitAll"/>
        <sec:intercept-url pattern="/secure/**" access="isAuthenticated()" />

        <sec:custom-filter ref="casFilter" position="CAS_FILTER" />
        <sec:custom-filter ref="singleLogoutFilter"  before="CAS_FILTER"/>
        <sec:custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>

        <sec:logout logout-success-url="/index.jsp"/>
    </sec:http>

    <!-- Spring Security Authentication Manager -->
    <sec:authentication-manager alias="authManager">
        <sec:authentication-provider ref="casAuthProvider" />
    </sec:authentication-manager>

    <sec:global-method-security pre-post-annotations="enabled"/>

    <!-- Spring Security Authentication Entry Points -->
    <bean id="restEntryPoint" class="ungp.sampleng.backend.security.RESTAuthenticationEntryPoint" />

    <bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
          p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.server.url}/login" />

    <!-- JASIG CAS Authentication Filter -->
    <bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authManager"/>
    </bean>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
          p:service="${cas.service.url}/j_spring_cas_security_check" p:authenticateAllArtifacts="true"
          p:sendRenew="false"/>

    <bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
            p:serviceProperties-ref="serviceProperties"
            p:key="casAuthProviderKey">
        <property name="authenticationUserDetailsService">
            <bean class="org.springframework.security.cas.userdetails.GrantedAuthorityFromAssertionAttributesUserDetailsService">
                <constructor-arg>
                    <array>
                        <value>role</value>
                    </array>
                </constructor-arg>
            </bean>
        </property>
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg index="0" value="${cas.server.url}" />
            </bean>
        </property>
    </bean>

     <bean id="casAuthenticationFilter" class="org.jasig.cas.client.authentication.AuthenticationFilter">
        <property name="casServerLoginUrl" value="${cas.server.url}/login" />
        <property name="serverName" value="${cas.server}" />
    </bean>

    <!--
        In memory CAS ticket storage

        NOTE: In a real application you should not use an in memory implementation. You will also want
        to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
            p:filterProcessesUrl="/j_spring_cas_security_logout">
        <constructor-arg value="${cas.server.url}/logout"/>
        <constructor-arg>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </constructor-arg>
    </bean>

</beans>